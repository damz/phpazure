<sect1 id="microsoft.azure.storage.blob">
  <title>Microsoft_Azure_Storage_Blob</title>

  <sect2 id="microsoft.azure.storage.blob">
    <title>Introduction</title>

    <para>
      Blob Storage stores sets of binary data. Blob storage offers the
      following three resources: the storage account, containers, and blobs.
      Within your storage account, containers provide a way to organize sets
      of blobs within your storage account.
    </para>

    <para>
      Blob Storage is offered by Windows Azure as a REST API which is wrapped
      by the <code>Microsoft_Azure_Storage_Blob</code> class in order to provide
      a native PHP interface to the storage account.
    </para>
  </sect2>

  <sect2 id="microsoft.azure.storage.blob.api">
    <title>API Examples</title>

    <para>
      This topic lists some examples of using the <code>Microsoft_Azure_Storage_Blob</code> class.
      Other features are available in the download package, as well as a detailed API documentation
      of those features.
    </para>
  </sect2>

  <sect2 id="microsoft.azure.storage.blob.api.create-container">
    <title>Creating a storage container</title>

    <para>
      Using the following code, a blob storage container can be created on development storage.
    </para>

    <example id="microsoft.azure.storage.blob.api.create-container">
      <title>Creating a storage container</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_Azure_Storage_Blob */
require_once 'Microsoft/Azure/Storage/Blob.php';

$storageClient = new Microsoft_Azure_Storage_Blob();
$result = $storageClient->createContainer('testcontainer');

echo 'Container name is: ' . $result->Name;
]]>
      </programlisting>
    </example>
  </sect2>

  <sect2 id="microsoft.azure.storage.blob.api.delete-container">
    <title>Deleting a storage container</title>

    <para>
      Using the following code, a blob storage container can be removed from development storage.
    </para>

    <example id="microsoft.azure.storage.blob.api.delete-container">
      <title>Deleting a storage container</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_Azure_Storage_Blob */
require_once 'Microsoft/Azure/Storage/Blob.php';

$storageClient = new Microsoft_Azure_Storage_Blob();
$storageClient->deleteContainer('testcontainer');
]]>
      </programlisting>
    </example>
  </sect2>

  <sect2 id="microsoft.azure.storage.blob.api.storing-blob">
    <title>Storing a blob</title>

    <para>
      Using the following code, a blob can be uploaded to a blob storage
      container on development storage. Note that the container has already
      been created before.
    </para>

    <example id="microsoft.azure.storage.blob.api.storing-blob">
      <title>Storing a blob</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_Azure_Storage_Blob */
require_once 'Microsoft/Azure/Storage/Blob.php';

$storageClient = new Microsoft_Azure_Storage_Blob();

// upload /home/maarten/example.txt to Azure
$result = $storageClient->putBlob('testcontainer', 'example.txt', '/home/maarten/example.txt');

echo 'Blob name is: ' . $result->Name;
]]>
      </programlisting>
    </example>
  </sect2>

  <sect2 id="microsoft.azure.storage.blob.api.copy-blob">
    <title>Copying a blob</title>

    <para>
      Using the following code, a blob can be copied from inside the storage account.
      The advantage of using this method is that the copy operation occurs in the Azure
      cloud and does not involve downloading the blob. Note that the container has
      already been created before.
    </para>

    <example id="microsoft.azure.storage.blob.api.copy-blob">
      <title>Copying a blob</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_Azure_Storage_Blob */
require_once 'Microsoft/Azure/Storage/Blob.php';

$storageClient = new Microsoft_Azure_Storage_Blob();

// copy example.txt to example2.txt
$result = $storageClient->copyBlob('testcontainer', 'example.txt', 'testcontainer', 'example2.txt');

echo 'Copied blob name is: ' . $result->Name;
]]>
      </programlisting>
    </example>
  </sect2>

  <sect2 id="microsoft.azure.storage.blob.api.download-blob">
    <title>Downloading a blob</title>

    <para>
      Using the following code, a blob can be downloaded from a blob storage container
      on development storage. Note that the container has already been created before
      and a blob has been uploaded.
    </para>

    <example id="microsoft.azure.storage.blob.api.download-blob">
      <title>Downloading a blob</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_Azure_Storage_Blob */
require_once 'Microsoft/Azure/Storage/Blob.php';

$storageClient = new Microsoft_Azure_Storage_Blob();

// download file to /home/maarten/example.txt
$storageClient->getBlob('testcontainer', 'example.txt', '/home/maarten/example.txt');
]]>
      </programlisting>
    </example>
  </sect2>

  <sect2 id="microsoft.azure.storage.blob.api.public-blob">
    <title>Making a blob publicly available</title>

    <para>
      By default, blob storage containers on Windows Azure are protected from public
      viewing. If any user on the Internet should have access to a blob container,
      its ACL can be set to public. Note that this applies to a complete container
      and not to a single blob!
    </para>

    <para>
      Using the following code, blob storage container ACL can be set on development
      storage. Note that the container has already been created before.
    </para>

    <example id="microsoft.azure.storage.blob.api.public-blob">
      <title>Making a blob publicly available</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_Azure_Storage_Blob */
require_once 'Microsoft/Azure/Storage/Blob.php';

$storageClient = new Microsoft_Azure_Storage_Blob();

// make container publicly available
$storageClient->setContainerAcl('testcontainer', Microsoft_Azure_Storage_Blob::ACL_PUBLIC);
]]>
      </programlisting>
    </example>
  </sect2>
</sect1>