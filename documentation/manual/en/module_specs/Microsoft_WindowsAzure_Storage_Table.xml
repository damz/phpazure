<sect1 id="microsoft.windowsazure.storage.table">
  <title>Microsoft_WindowsAzure_Storage_Table</title>

  <sect2 id="microsoft.windowsazure.storage.table">
    <title>Introduction</title>

    <para>
      The Table service offers structured storage in the form of tables.
    </para>

    <para>
      Table Storage is offered by Windows Azure as a REST API which is wrapped
      by the <code>Microsoft_WindowsAzure_Storage_Table</code> class in order to provide
      a native PHP interface to the storage account.
    </para>
  </sect2>

  <sect2 id="microsoft.windowsazure.storage.table.api">
    <title>API Examples</title>

    <para>
      This topic lists some examples of using the <code>Microsoft_WindowsAzure_Storage_Table</code> class.
      Other features are available in the download package, as well as a detailed API documentation
      of those features.
    </para>

    <para>
      Note that development table storage (in the Windows Azure SDK) does not support all features
      provided by the API.
      Therefore, the examples listed on this page are to be used on Windows Azure production table storage.
    </para>
  </sect2>



  <sect2 id="microsoft.windowsazure.storage.table.api.table">
    <title>Operations on tables</title>

    <para>
      This topic lists some samples of operations that can be executed on tables.
    </para>
  </sect2>

  <sect2 id="microsoft.windowsazure.storage.table.api.table.create">
    <title>Creating a table</title>

    <para>
      Using the following code, a table can be created on Windows Azure production table storage.
    </para>

    <example id="microsoft.windowsazure.storage.table.api.table.create">
      <title>Creating a table</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');
$result = $storageClient->createTable('testtable');

echo 'New table name is: ' . $result->Name;
]]>
      </programlisting>
    </example>
  </sect2>

  <sect2 id="microsoft.windowsazure.storage.table.api.table.list">
    <title>Listing all tables</title>

    <para>
      Using the following code, a list of all tables in Windows Azure production table storage can be queried.
    </para>

    <example id="microsoft.windowsazure.storage.table.api.table.list">
      <title>Listing all tables</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');
$result = $storageClient->listTables();
foreach ($result as $table)
{
    echo 'Table name is: ' . $table->Name . "\r\n";
}
]]>
      </programlisting>
    </example>
  </sect2>



  <sect2 id="microsoft.windowsazure.storage.table.api.entities">
    <title>Operations on entities</title>
    
    <para>
      Tables store data as collections of entities. Entities are similar to rows.
      An entity has a primary key and a set of properties. A property is a name, 
      typed-value pair, similar to a column.
    </para>
    
    <para>
      The Table service does not enforce any schema for tables, so two entities 
      in the same table may have different sets of properties. Developers may choose
      to enforce a schema on the client side. A table may contain any number of entities.
    </para>
    
    <para>
      <code>Microsoft_WindowsAzure_Storage_Table</code> provides 2 ways of working with entities:

      <itemizedlist>
        <listitem>
          <para>
            Enforced schema
          </para>
        </listitem>

        <listitem>
          <para>
            No enforced schema
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      All examples will make use of the following enforced schema class.
    </para>

    <example id="microsoft.windowsazure.storage.table.api.entities.schema">
      <title>Enforced schema used in samples</title>
      <programlisting role="php">
        <![CDATA[<?php
class SampleEntity extends Microsoft_WindowsAzure_Storage_TableEntity
{
    /**
     * @azure Name
     */
    public $Name;
    
    /**
     * @azure Age Edm.Int64
     */
    public $Age;
    
    /**
     * @azure Visible Edm.Boolean
     */
    public $Visible = false;
}
]]>
      </programlisting>
    </example>

    <para>
      Note that if no schema class is passed into table storage methods, <code>Microsoft_WindowsAzure_Storage_Table</code>
      automatically works with <code>Microsoft_WindowsAzure_Storage_DynamicTableEntity</code>.
    </para>
  </sect2>



  <sect2 id="microsoft.windowsazure.storage.table.api.schema.enforced">
    <title>Enforced schema entities</title>

    <para>
      To enforce a schema on the client side using the <code>Microsoft_WindowsAzure_Storage_Table</code> class,
      you can create a class which inherits <code>Microsoft_WindowsAzure_Storage_TableEntity</code>.
      This class provides some basic functionality for the <code>Microsoft_WindowsAzure_Storage_Table</code> class
      to work with a client-side schema.
    </para>

    <para>
      Base properties provided by <code>Microsoft_WindowsAzure_Storage_TableEntity</code> are:

      <itemizedlist>
        <listitem>
          <para>
            PartitionKey (exposed trough getPartitionKey() and setPartitionKey())
          </para>
        </listitem>

        <listitem>
          <para>
            RowKey (exposed trough getRowKey() and setRowKey())
          </para>
        </listitem>

        <listitem>
          <para>
            Timestamp (exposed trough getTimestamp() and setTimestamp())
          </para>
        </listitem>

        <listitem>
          <para>
            Etag value (exposed trough getEtag() and setEtag())
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      Here's a sample class inheriting <code>Microsoft_WindowsAzure_Storage_TableEntity</code>:
    </para>

    <example id="microsoft.windowsazure.storage.table.api.schema.enforced">
      <title>Sample enforced schema class</title>
      <programlisting role="php">
        <![CDATA[<?php
class SampleEntity extends Microsoft_WindowsAzure_Storage_TableEntity
{
    /**
     * @azure Name
     */
    public $Name;
    
    /**
     * @azure Age Edm.Int64
     */
    public $Age;
    
    /**
     * @azure Visible Edm.Boolean
     */
    public $Visible = false;
}
]]>
      </programlisting>
    </example>

    <para>
      The <code>Microsoft_WindowsAzure_Storage_Table</code> class will map any class inherited from
      <code>Microsoft_WindowsAzure_Storage_TableEntity</code> to Windows Azure table storage entities
      with the correct data type and property name. All there is to storing a property in
      Windows Azure is adding a docblock comment to a public property or public
      getter/setter, in the following format:
    </para>

    <example id="microsoft.windowsazure.storage.table.api.schema.enforced-property">
      <title>Enforced property</title>
      <programlisting role="php">
        <![CDATA[
/**
 * @azure <property name in Windows Azure> <optional property type>
 */
public $<property name in PHP>;
]]>
      </programlisting>
    </example>

    <para>
      Let's see how to define a propety "Age" as an integer on Windows Azure table storage:
    </para>

    <example id="microsoft.windowsazure.storage.table.api.schema.enforced-property-sample">
      <title>Sample enforced property</title>
      <programlisting role="php">
        <![CDATA[
/**
 * @azure Age Edm.Int64
 */
public $Age;
]]>
      </programlisting>
    </example>

    <para>
      Note that a property does not necessarily have to be named the same on
      Windows Azure table storage. The Windows Azure table storage property
      name can be defined as well as the type.
    </para>

    <para>
      The following data types are supported:

      <itemizedlist>
        <listitem>
          <para>
            Edm.Binary - An array of bytes up to 64 KB in size.
          </para>
        </listitem>

        <listitem>
          <para>
            Edm.Boolean - A boolean value.
          </para>
        </listitem>

        <listitem>
          <para>
            Edm.DateTime - A 64-bit value expressed as Coordinated Universal Time (UTC). The supported DateTime range begins from 12:00 midnight, January 1, 1601 A.D. (C.E.), Coordinated Universal Time (UTC). The range ends at December 31st, 9999.
          </para>
        </listitem>

        <listitem>
          <para>
            Edm.Double - A 64-bit floating point value.
          </para>
        </listitem>

        <listitem>
          <para>
            Edm.Guid - A 128-bit globally unique identifier.
          </para>
        </listitem>

        <listitem>
          <para>
            Edm.Int32 - A 32-bit integer.
          </para>
        </listitem>

        <listitem>
          <para>
            Edm.Int64 - A 64-bit integer.
          </para>
        </listitem>

        <listitem>
          <para>
            Edm.String - A UTF-16-encoded value. String values may be up to 64 KB in size.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </sect2>

  <sect2 id="microsoft.windowsazure.storage.table.api.schema.notenforced">
    <title>No enforced schema entities (a.k.a. DynamicEntity)</title>

    <para>
      To use the <code>Microsoft_WindowsAzure_Storage_Table</code> class without defining a schema,
      you can make use of the <code>Microsoft_WindowsAzure_Storage_DynamicTableEntity</code> class.
      This class inherits <code>Microsoft_WindowsAzure_Storage_TableEntity</code> like an enforced schema
      class does, but contains additional logic to make it dynamic and not bound to a schema.
    </para>

    <para>
      Base properties provided by <code>Microsoft_WindowsAzure_Storage_DynamicTableEntity</code> are:

      <itemizedlist>
        <listitem>
          <para>
            PartitionKey (exposed trough getPartitionKey() and setPartitionKey())
          </para>
        </listitem>

        <listitem>
          <para>
            RowKey (exposed trough getRowKey() and setRowKey())
          </para>
        </listitem>

        <listitem>
          <para>
            Timestamp (exposed trough getTimestamp() and setTimestamp())
          </para>
        </listitem>

        <listitem>
          <para>
            Etag value (exposed trough getEtag() and setEtag())
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      Other properties can be added on the fly. Their Windows Azure table storage type will be determined on-the-fly:
    </para>

    <example id="microsoft.windowsazure.storage.table.api.schema.notenforced-sample1">
      <title>Dynamicaly adding properties to Microsoft_WindowsAzure_Storage_DynamicTableEntity</title>
      <programlisting role="php">
        <![CDATA[<?php
$target = new Microsoft_WindowsAzure_Storage_DynamicTableEntity('partition1', '000001');
$target->Name = 'Name'; // Will add property "Name" of type "Edm.String"
$target->Age  = 25; // Will add property "Age" of type "Edm.Int32"
]]>
      </programlisting>
    </example>

    <para>
      Optionally, a property type can be enforced:
    </para>

    <example id="microsoft.windowsazure.storage.table.api.schema.notenforced-sample2">
      <title>Forcing property types on Microsoft_WindowsAzure_Storage_DynamicTableEntity</title>
      <programlisting role="php">
        <![CDATA[<?php
$target = new Microsoft_WindowsAzure_Storage_DynamicTableEntity('partition1', '000001');
$target->Name = 'Name'; // Will add property "Name" of type "Edm.String"
$target->Age  = 25; // Will add property "Age" of type "Edm.Int32"

$target->setAzurePropertyType('Age', 'Edm.Int64'); // Changes type of property "Age" to "Edm.Int32"
]]>
      </programlisting>
    </example>

    <para>
      The <code>Microsoft_WindowsAzure_Storage_Table</code> class automatically works with
      <code>Microsoft_WindowsAzure_Storage_TableEntity</code> if no specific class is passed
      into Table Storage methods.
    </para>
  </sect2>
  
  

  <sect2 id="microsoft.windowsazure.storage.table.api.entities.insert">
    <title>Inserting an entity</title>

    <para>
      Using the following code, an entity can be inserted into a table named 'testtable'.
      Note that the table has already been created before.
    </para>

    <example id="microsoft.windowsazure.storage.table.api.entities.insert">
      <title>Inserting an entity</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$entity = new SampleEntity ('partition1', 'row1');
$entity->FullName = "Maarten";
$entity->Age = 25;
$entity->Visible = true;

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');
$result = $storageClient->insertEntity('testtable', $entity);

// Check the timestamp and etag of the newly inserted entity
echo 'Timestamp: ' . $result->getTimestamp() . "\n";
echo 'Etag: ' . $result->getEtag() . "\n";
]]>
      </programlisting>
    </example>
  </sect2>

  <sect2 id="microsoft.windowsazure.storage.table.api.entities.retrieve-by-id">
    <title>Retrieving an entity by partition key and row key</title>

    <para>
      Using the following code, an entity can be retrieved by partition key and row key.
      Note that the table and entity have already been created before.
    </para>

    <example id="microsoft.windowsazure.storage.table.api.entities.retrieve-by-id">
      <title>Retrieving an entity by partition key and row key</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');
$entity= $storageClient->retrieveEntityById('testtable', 'partition1', 'row1', 'SampleEntity');
]]>
      </programlisting>
    </example>
  </sect2>

  <sect2 id="microsoft.windowsazure.storage.table.api.entities.updating">
    <title>Updating an entity</title>

    <para>
      Using the following code, an entity can be updated.
      Note that the table and entity have already been created before.
    </para>

    <example id="microsoft.windowsazure.storage.table.api.entities.updating">
      <title>Updating an entity</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');
$entity = $storageClient->retrieveEntityById('testtable', 'partition1', 'row1', 'SampleEntity');

$entity->Name = 'New name';
$result = $storageClient->updateEntity('testtable', $entity);
]]>
      </programlisting>
    </example>

    <para>
      If you want to make sure the entity has not been updated before, you can make sure the Etag of
      the entity is checked. If the entity already has had an update, the update will fail to make
      sure you do not overwrite any newer data.
    </para>

    <example id="microsoft.windowsazure.storage.table.api.entities.updating-etag">
      <title>Updating an entity (with Etag check)</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');
$entity = $storageClient->retrieveEntityById('testtable', 'partition1', 'row1', 'SampleEntity');

$entity->Name = 'New name';
$result = $storageClient->updateEntity('testtable', $entity, true); // last parameter instructs the Etag check
]]>
      </programlisting>
    </example>
  </sect2>

  <sect2 id="microsoft.windowsazure.storage.table.api.entities.delete">
    <title>Deleting an entity</title>

    <para>
      Using the following code, an entity can be deleted.
      Note that the table and entity have already been created before.
    </para>

    <example id="microsoft.windowsazure.storage.table.api.delete">
      <title>Deleting an entity</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');
$entity = $storageClient->retrieveEntityById('testtable', 'partition1', 'row1', 'SampleEntity');
$result = $storageClient->deleteEntity('testtable', $entity);
]]>
      </programlisting>
    </example>
  </sect2>

  <sect2 id="microsoft.windowsazure.storage.table.api.entities.querying">
    <title>Performing queries</title>

    <para>
      Queries in <code>Microsoft_WindowsAzure_Storage_Table</code> table storage can be performed in two ways:

      <itemizedlist>
        <listitem>
          <para>
            By manually creating a filter condition (involving learning a new query language)
          </para>
        </listitem>

        <listitem>
          <para>
            By using the fluent interface provided by the <code>Microsoft_WindowsAzure_Storage_Table</code>
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      Using the following code, a table can be queried using a filter condition.
      Note that the table and entities have already been created before.
    </para>

    <example id="microsoft.windowsazure.storage.table.api.entities.querying">
      <title>Performing queries using a filter condition</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');
$entities = $storageClient->storageClient->retrieveEntities(
    'testtable',
    'Name eq \'Maarten\' and PartitionKey eq \'partition1\'',
    'SampleEntity'
);

foreach ($entities as $entity)
{
    echo 'Name: ' . $entity->Name . "\n";
}
]]>
      </programlisting>
    </example>

    <para>
      Using the following code, a table can be queried using a fluent interface.
      Note that the table and entities have already been created before.
    </para>

    <example id="microsoft.windowsazure.storage.table.api.entities.querying">
      <title>Performing queries using a fluent interface</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');
$entities = $storageClient->storageClient->retrieveEntities(
    'testtable',
    $storageClient->select()
                  ->from($tableName)
                  ->where('Name eq ?', 'Maarten')
                  ->andWhere('PartitionKey eq ?', 'partition1'),
    'SampleEntity'
);

foreach ($entities as $entity)
{
    echo 'Name: ' . $entity->Name . "\n";
}
]]>
      </programlisting>
    </example>
  </sect2>



  <sect2 id="microsoft.windowsazure.storage.table.api.batch">
    <title>Batch operations</title>

    <para>
      This topic demonstrates how to use the table entity group transaction features provided
      by Windows Azure table storage. Windows Azure table storage supports batch transactions
      on entities that are in the same table and belong to the same partition group.
      A transaction can include at most 100 entities.
    </para>
    <para>
      The following example uses a batch operation (transaction) to insert a set of entities
      into the 'testtable' table. Note that the table has already been created before.
    </para>

    <example id="microsoft.windowsazure.storage.table.api.batch">
      <title>Executing a batch operation</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');

// Start batch
$batch = $storageClient->startBatch();
            
// Insert entities in batch
$entities = generateEntities();
foreach ($entities as $entity)
{
    $storageClient->insertEntity($tableName, $entity);
}
            
// Commit
$batch->commit();
]]>
      </programlisting>
    </example>
  </sect2>
  
  
  
  <sect2 id="microsoft.windowsazure.storage.table.api.sessionhandler">
    <title>Table storage session handler</title>

    <para>
      When running a PHP application on the Windows Azure platform in a load-balanced mode
      (running 2 Web Role instances or more), it is important that PHP session data can be
      shared between multiple Web Role instances. The Windows Azure SDK for PHP provides
      the <code>Microsoft_WindowsAzure_SessionHandler</code> class, which uses Windows Azure Table
      Storage as a session handler for PHP applications.
    </para>
    
    <para>
      To use the <code>Microsoft_WindowsAzure_SessionHandler</code> session handler,
      it should be registered as the default session handler for your PHP application:
    </para>

    <example id="microsoft.windowsazure.storage.table.api.sessionhandler-register">
      <title>Registering table storage session handler</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');

$sessionHandler = new Microsoft_WindowsAzure_SessionHandler($storageClient , 'sessionstable');
$sessionHandler->register();
]]>
      </programlisting>
    </example>
    
    <para>
      The above code registers the <code>Microsoft_WindowsAzure_SessionHandler</code> session handler and will
      store sessions in a table called "sessionstable".
	</para>
	
	<para>
	  After registration of the <code>Microsoft_WindowsAzure_SessionHandler</code> session handler,
	  sessions can be started and used in the same way as a normal PHP session:
    </para>
    
    <example id="microsoft.windowsazure.storage.table.api.sessionhandler-usage">
      <title>Using table storage session handler</title>
      <programlisting role="php">
        <![CDATA[<?php
/** Microsoft_WindowsAzure_Storage_Table */
require_once 'Microsoft/WindowsAzure/Storage/Table.php';

$storageClient = new Microsoft_WindowsAzure_Storage_Table('table.core.windows.net', 'myaccount', 'myauthkey');

$sessionHandler = new Microsoft_WindowsAzure_SessionHandler($storageClient , 'sessionstable');
$sessionHandler->register();

session_start();

if (!isset($_SESSION['firstVisit']))
{
    $_SESSION['firstVisit'] = time();
}

// ...
]]>
      </programlisting>
    </example>
    
    <para>
      WARNING: The <code>Microsoft_WindowsAzure_SessionHandler</code> session handler should be registered before a call to session_start() is made!
    </para>
  </sect2>
</sect1>